package com.health.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.health.data.HelioPhysics;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tblheliophysicsdaily.
*/
public class HelioPhysicsDao extends AbstractDao<HelioPhysics, Long> {

    public static final String TABLENAME = "tblheliophysicsdaily";

    /**
     * Properties of entity HelioPhysics.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property ServerId = new Property(1, Long.class, "ServerId", false, "serverid");
        public final static Property RowId = new Property(2, String.class, "RowId", false, "rowid");
        public final static Property InfoDate = new Property(3, java.util.Date.class, "InfoDate", false, "dt");
        public final static Property F10_7 = new Property(4, Integer.class, "F10_7", false, "F10_7");
        public final static Property SunspotNumber = new Property(5, Integer.class, "SunspotNumber", false, "SUNSPOT_NUMBER");
        public final static Property SunspotArea = new Property(6, Integer.class, "SunspotArea", false, "SUNSPOT_AREA");
        public final static Property NewRegions = new Property(7, Integer.class, "NewRegions", false, "NEW_REGIONS");
        public final static Property Xbkgd = new Property(8, String.class, "Xbkgd", false, "XBKGD");
        public final static Property FlaresC = new Property(9, Integer.class, "FlaresC", false, "FLARES_C");
        public final static Property FlaresM = new Property(10, Integer.class, "FlaresM", false, "FLARES_M");
        public final static Property FlaresX = new Property(11, Integer.class, "FlaresX", false, "FLARES_X");
        public final static Property FlaresS = new Property(12, Integer.class, "FlaresS", false, "FLARES_S");
        public final static Property Flares1 = new Property(13, Integer.class, "Flares1", false, "FLARES1");
        public final static Property Flares2 = new Property(14, Integer.class, "Flares2", false, "FLARES2");
        public final static Property Flares3 = new Property(15, Integer.class, "Flares3", false, "FLARES3");
    };


    public HelioPhysicsDao(DaoConfig config) {
        super(config);
    }
    
    public HelioPhysicsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tblheliophysicsdaily' (" + //
                "'id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'serverid' INTEGER UNIQUE ," + // 1: ServerId
                "'rowid' TEXT UNIQUE ," + // 2: RowId
                "'dt' INTEGER," + // 3: InfoDate
                "'F10_7' INTEGER," + // 4: F10_7
                "'SUNSPOT_NUMBER' INTEGER," + // 5: SunspotNumber
                "'SUNSPOT_AREA' INTEGER," + // 6: SunspotArea
                "'NEW_REGIONS' INTEGER," + // 7: NewRegions
                "'XBKGD' TEXT," + // 8: Xbkgd
                "'FLARES_C' INTEGER," + // 9: FlaresC
                "'FLARES_M' INTEGER," + // 10: FlaresM
                "'FLARES_X' INTEGER," + // 11: FlaresX
                "'FLARES_S' INTEGER," + // 12: FlaresS
                "'FLARES1' INTEGER," + // 13: Flares1
                "'FLARES2' INTEGER," + // 14: Flares2
                "'FLARES3' INTEGER);"); // 15: Flares3
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_tblheliophysicsdaily_serverid ON tblheliophysicsdaily" +
                " (serverid);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tblheliophysicsdaily'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HelioPhysics entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ServerId = entity.getServerId();
        if (ServerId != null) {
            stmt.bindLong(2, ServerId);
        }
 
        String RowId = entity.getRowId();
        if (RowId != null) {
            stmt.bindString(3, RowId);
        }
 
        java.util.Date InfoDate = entity.getInfoDate();
        if (InfoDate != null) {
            stmt.bindLong(4, InfoDate.getTime());
        }
 
        Integer F10_7 = entity.getF10_7();
        if (F10_7 != null) {
            stmt.bindLong(5, F10_7);
        }
 
        Integer SunspotNumber = entity.getSunspotNumber();
        if (SunspotNumber != null) {
            stmt.bindLong(6, SunspotNumber);
        }
 
        Integer SunspotArea = entity.getSunspotArea();
        if (SunspotArea != null) {
            stmt.bindLong(7, SunspotArea);
        }
 
        Integer NewRegions = entity.getNewRegions();
        if (NewRegions != null) {
            stmt.bindLong(8, NewRegions);
        }
 
        String Xbkgd = entity.getXbkgd();
        if (Xbkgd != null) {
            stmt.bindString(9, Xbkgd);
        }
 
        Integer FlaresC = entity.getFlaresC();
        if (FlaresC != null) {
            stmt.bindLong(10, FlaresC);
        }
 
        Integer FlaresM = entity.getFlaresM();
        if (FlaresM != null) {
            stmt.bindLong(11, FlaresM);
        }
 
        Integer FlaresX = entity.getFlaresX();
        if (FlaresX != null) {
            stmt.bindLong(12, FlaresX);
        }
 
        Integer FlaresS = entity.getFlaresS();
        if (FlaresS != null) {
            stmt.bindLong(13, FlaresS);
        }
 
        Integer Flares1 = entity.getFlares1();
        if (Flares1 != null) {
            stmt.bindLong(14, Flares1);
        }
 
        Integer Flares2 = entity.getFlares2();
        if (Flares2 != null) {
            stmt.bindLong(15, Flares2);
        }
 
        Integer Flares3 = entity.getFlares3();
        if (Flares3 != null) {
            stmt.bindLong(16, Flares3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HelioPhysics readEntity(Cursor cursor, int offset) {
        HelioPhysics entity = new HelioPhysics( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ServerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RowId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // InfoDate
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // F10_7
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // SunspotNumber
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // SunspotArea
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // NewRegions
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Xbkgd
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // FlaresC
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // FlaresM
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // FlaresX
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // FlaresS
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // Flares1
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // Flares2
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15) // Flares3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HelioPhysics entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRowId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInfoDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setF10_7(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSunspotNumber(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSunspotArea(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setNewRegions(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setXbkgd(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFlaresC(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setFlaresM(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setFlaresX(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setFlaresS(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setFlares1(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setFlares2(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setFlares3(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HelioPhysics entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HelioPhysics entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
