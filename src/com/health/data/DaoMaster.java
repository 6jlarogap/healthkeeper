package com.health.data;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.health.data.BaseDTODao;
import com.health.data.BaseSyncDTODao;
import com.health.data.BaseUserSyncDTODao;
import com.health.data.BodyFeelingTypeDao;
import com.health.data.BodyComplaintTypeDao;
import com.health.data.BodyRegionDao;
import com.health.data.CustomBodyFeelingTypeDao;
import com.health.data.BodyFeelingDao;
import com.health.data.CountryDao;
import com.health.data.CityDao;
import com.health.data.RecoveryAccountQuestionDao;
import com.health.data.UserDao;
import com.health.data.CommonFeelingGroupDao;
import com.health.data.UnitDimensionDao;
import com.health.data.CommonFeelingTypeDao;
import com.health.data.CustomCommonFeelingTypeDao;
import com.health.data.CommonFeelingDao;
import com.health.data.FactorGroupDao;
import com.health.data.FactorTypeDao;
import com.health.data.CustomFactorTypeDao;
import com.health.data.FactorDao;
import com.health.data.BodyRegion_BodyFeelingTypeDao;
import com.health.data.CloudyTypeDao;
import com.health.data.WindDirectionTypeDao;
import com.health.data.ZodiakTypeDao;
import com.health.data.ComplaintDao;
import com.health.data.DownloadPeriodDao;
import com.health.data.GeoPhysicsDao;
import com.health.data.HelioPhysicsDao;
import com.health.data.KpIndexDao;
import com.health.data.MoonPhaseDao;
import com.health.data.MoonDao;
import com.health.data.ParticleDao;
import com.health.data.PlanetDao;
import com.health.data.SolarEclipseDao;
import com.health.data.SunDao;
import com.health.data.WeatherDao;
import com.health.data.UserBodyFeelingTypeDao;
import com.health.data.OperationUserDataDao;
import com.health.db.DB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1Â 000): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 11;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        BaseDTODao.createTable(db, ifNotExists);
        BaseSyncDTODao.createTable(db, ifNotExists);
        BaseUserSyncDTODao.createTable(db, ifNotExists);
        BodyFeelingTypeDao.createTable(db, ifNotExists);
        BodyComplaintTypeDao.createTable(db, ifNotExists);
        BodyRegionDao.createTable(db, ifNotExists);
        CustomBodyFeelingTypeDao.createTable(db, ifNotExists);
        BodyFeelingDao.createTable(db, ifNotExists);
        CountryDao.createTable(db, ifNotExists);
        CityDao.createTable(db, ifNotExists);
        RecoveryAccountQuestionDao.createTable(db, ifNotExists);
        UserDao.createTable(db, ifNotExists);
        CommonFeelingGroupDao.createTable(db, ifNotExists);
        UnitDimensionDao.createTable(db, ifNotExists);
        CommonFeelingTypeDao.createTable(db, ifNotExists);
        CustomCommonFeelingTypeDao.createTable(db, ifNotExists);
        CommonFeelingDao.createTable(db, ifNotExists);
        FactorGroupDao.createTable(db, ifNotExists);
        FactorTypeDao.createTable(db, ifNotExists);
        CustomFactorTypeDao.createTable(db, ifNotExists);
        FactorDao.createTable(db, ifNotExists);
        BodyRegion_BodyFeelingTypeDao.createTable(db, ifNotExists);
        CloudyTypeDao.createTable(db, ifNotExists);
        WindDirectionTypeDao.createTable(db, ifNotExists);
        ZodiakTypeDao.createTable(db, ifNotExists);
        ComplaintDao.createTable(db, ifNotExists);
        DownloadPeriodDao.createTable(db, ifNotExists);
        GeoPhysicsDao.createTable(db, ifNotExists);
        HelioPhysicsDao.createTable(db, ifNotExists);
        KpIndexDao.createTable(db, ifNotExists);
        MoonPhaseDao.createTable(db, ifNotExists);
        MoonDao.createTable(db, ifNotExists);
        ParticleDao.createTable(db, ifNotExists);
        PlanetDao.createTable(db, ifNotExists);
        SolarEclipseDao.createTable(db, ifNotExists);
        SunDao.createTable(db, ifNotExists);
        WeatherDao.createTable(db, ifNotExists);
        WeatherDailyDao.createTable(db, ifNotExists);
        UserBodyFeelingTypeDao.createTable(db, ifNotExists);
        OperationUserDataDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        BaseDTODao.dropTable(db, ifExists);
        BaseSyncDTODao.dropTable(db, ifExists);
        BaseUserSyncDTODao.dropTable(db, ifExists);
        BodyFeelingTypeDao.dropTable(db, ifExists);
        BodyComplaintTypeDao.dropTable(db, ifExists);
        BodyRegionDao.dropTable(db, ifExists);
        CustomBodyFeelingTypeDao.dropTable(db, ifExists);
        BodyFeelingDao.dropTable(db, ifExists);
        CountryDao.dropTable(db, ifExists);
        CityDao.dropTable(db, ifExists);
        RecoveryAccountQuestionDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        CommonFeelingGroupDao.dropTable(db, ifExists);
        UnitDimensionDao.dropTable(db, ifExists);
        CommonFeelingTypeDao.dropTable(db, ifExists);
        CustomCommonFeelingTypeDao.dropTable(db, ifExists);
        CommonFeelingDao.dropTable(db, ifExists);
        FactorGroupDao.dropTable(db, ifExists);
        FactorTypeDao.dropTable(db, ifExists);
        CustomFactorTypeDao.dropTable(db, ifExists);
        FactorDao.dropTable(db, ifExists);
        BodyRegion_BodyFeelingTypeDao.dropTable(db, ifExists);
        CloudyTypeDao.dropTable(db, ifExists);
        WindDirectionTypeDao.dropTable(db, ifExists);
        ZodiakTypeDao.dropTable(db, ifExists);
        ComplaintDao.dropTable(db, ifExists);
        DownloadPeriodDao.dropTable(db, ifExists);
        GeoPhysicsDao.dropTable(db, ifExists);
        HelioPhysicsDao.dropTable(db, ifExists);
        KpIndexDao.dropTable(db, ifExists);
        MoonPhaseDao.dropTable(db, ifExists);
        MoonDao.dropTable(db, ifExists);
        ParticleDao.dropTable(db, ifExists);
        PlanetDao.dropTable(db, ifExists);
        SolarEclipseDao.dropTable(db, ifExists);
        SunDao.dropTable(db, ifExists);
        WeatherDao.dropTable(db, ifExists);
        WeatherDailyDao.dropTable(db, ifExists);
        UserBodyFeelingTypeDao.dropTable(db, ifExists);
        OperationUserDataDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
            DB.insertDictionaryTable(db);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(BaseDTODao.class);
        registerDaoClass(BaseSyncDTODao.class);
        registerDaoClass(BaseUserSyncDTODao.class);
        registerDaoClass(BodyFeelingTypeDao.class);
        registerDaoClass(BodyComplaintTypeDao.class);
        registerDaoClass(BodyRegionDao.class);
        registerDaoClass(CustomBodyFeelingTypeDao.class);
        registerDaoClass(BodyFeelingDao.class);
        registerDaoClass(CountryDao.class);
        registerDaoClass(CityDao.class);
        registerDaoClass(RecoveryAccountQuestionDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(CommonFeelingGroupDao.class);
        registerDaoClass(UnitDimensionDao.class);
        registerDaoClass(CommonFeelingTypeDao.class);
        registerDaoClass(CustomCommonFeelingTypeDao.class);
        registerDaoClass(CommonFeelingDao.class);
        registerDaoClass(FactorGroupDao.class);
        registerDaoClass(FactorTypeDao.class);
        registerDaoClass(CustomFactorTypeDao.class);
        registerDaoClass(FactorDao.class);
        registerDaoClass(BodyRegion_BodyFeelingTypeDao.class);
        registerDaoClass(CloudyTypeDao.class);
        registerDaoClass(WindDirectionTypeDao.class);
        registerDaoClass(ZodiakTypeDao.class);
        registerDaoClass(ComplaintDao.class);
        registerDaoClass(DownloadPeriodDao.class);
        registerDaoClass(GeoPhysicsDao.class);
        registerDaoClass(HelioPhysicsDao.class);
        registerDaoClass(KpIndexDao.class);
        registerDaoClass(MoonPhaseDao.class);
        registerDaoClass(MoonDao.class);
        registerDaoClass(ParticleDao.class);
        registerDaoClass(PlanetDao.class);
        registerDaoClass(SolarEclipseDao.class);
        registerDaoClass(SunDao.class);
        registerDaoClass(WeatherDao.class);
        registerDaoClass(WeatherDailyDao.class);
        registerDaoClass(UserBodyFeelingTypeDao.class);
        registerDaoClass(OperationUserDataDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
