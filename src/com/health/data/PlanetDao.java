package com.health.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.health.data.Planet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tblplanet.
*/
public class PlanetDao extends AbstractDao<Planet, Long> {

    public static final String TABLENAME = "tblplanet";

    /**
     * Properties of entity Planet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property ServerId = new Property(1, Long.class, "ServerId", false, "serverid");
        public final static Property RowId = new Property(2, String.class, "RowId", false, "rowid");
        public final static Property InfoDate = new Property(3, java.util.Date.class, "InfoDate", false, "dt");
        public final static Property MercuryRise = new Property(4, java.util.Date.class, "MercuryRise", false, "MERCURY_RISE");
        public final static Property MercurySet = new Property(5, java.util.Date.class, "MercurySet", false, "MERCURY_SET");
        public final static Property VenusRise = new Property(6, java.util.Date.class, "VenusRise", false, "VENUS_RISE");
        public final static Property VenusSet = new Property(7, java.util.Date.class, "VenusSet", false, "VENUS_SET");
        public final static Property MarsRise = new Property(8, java.util.Date.class, "MarsRise", false, "MARS_RISE");
        public final static Property MarsSet = new Property(9, java.util.Date.class, "MarsSet", false, "MARS_SET");
        public final static Property JupiterRise = new Property(10, java.util.Date.class, "JupiterRise", false, "JUPITER_RISE");
        public final static Property JupiterSet = new Property(11, java.util.Date.class, "JupiterSet", false, "JUPITER_SET");
        public final static Property SaturnRise = new Property(12, java.util.Date.class, "SaturnRise", false, "SATURN_RISE");
        public final static Property SaturnSet = new Property(13, java.util.Date.class, "SaturnSet", false, "SATURN_SET");
        public final static Property UranusRise = new Property(14, java.util.Date.class, "UranusRise", false, "URANUS_RISE");
        public final static Property UranusSet = new Property(15, java.util.Date.class, "UranusSet", false, "URANUS_SET");
        public final static Property NeptuneRise = new Property(16, java.util.Date.class, "NeptuneRise", false, "NEPTUNE_RISE");
        public final static Property NeptuneSet = new Property(17, java.util.Date.class, "NeptuneSet", false, "NEPTUNE_SET");
        public final static Property PlutoRise = new Property(18, java.util.Date.class, "PlutoRise", false, "PLUTON_RISE");
        public final static Property PlutoSet = new Property(19, java.util.Date.class, "PlutoSet", false, "PLUTON_SET");
    };


    public PlanetDao(DaoConfig config) {
        super(config);
    }
    
    public PlanetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tblplanet' (" + //
                "'id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'serverid' INTEGER UNIQUE ," + // 1: ServerId
                "'rowid' TEXT UNIQUE ," + // 2: RowId
                "'dt' INTEGER," + // 3: InfoDate
                "'MERCURY_RISE' INTEGER," + // 4: MercuryRise
                "'MERCURY_SET' INTEGER," + // 5: MercurySet
                "'VENUS_RISE' INTEGER," + // 6: VenusRise
                "'VENUS_SET' INTEGER," + // 7: VenusSet
                "'MARS_RISE' INTEGER," + // 8: MarsRise
                "'MARS_SET' INTEGER," + // 9: MarsSet
                "'JUPITER_RISE' INTEGER," + // 10: JupiterRise
                "'JUPITER_SET' INTEGER," + // 11: JupiterSet
                "'SATURN_RISE' INTEGER," + // 12: SaturnRise
                "'SATURN_SET' INTEGER," + // 13: SaturnSet
                "'URANUS_RISE' INTEGER," + // 14: UranusRise
                "'URANUS_SET' INTEGER," + // 15: UranusSet
                "'NEPTUNE_RISE' INTEGER," + // 16: NeptuneRise
                "'NEPTUNE_SET' INTEGER," + // 17: NeptuneSet
                "'PLUTON_RISE' INTEGER," + // 18: PlutoRise
                "'PLUTON_SET' INTEGER);"); // 19: PlutoSet
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_tblplanet_serverid ON tblplanet" +
                " (serverid);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tblplanet'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Planet entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ServerId = entity.getServerId();
        if (ServerId != null) {
            stmt.bindLong(2, ServerId);
        }
 
        String RowId = entity.getRowId();
        if (RowId != null) {
            stmt.bindString(3, RowId);
        }
 
        java.util.Date InfoDate = entity.getInfoDate();
        if (InfoDate != null) {
            stmt.bindLong(4, InfoDate.getTime());
        }
 
        java.util.Date MercuryRise = entity.getMercuryRise();
        if (MercuryRise != null) {
            stmt.bindLong(5, MercuryRise.getTime());
        }
 
        java.util.Date MercurySet = entity.getMercurySet();
        if (MercurySet != null) {
            stmt.bindLong(6, MercurySet.getTime());
        }
 
        java.util.Date VenusRise = entity.getVenusRise();
        if (VenusRise != null) {
            stmt.bindLong(7, VenusRise.getTime());
        }
 
        java.util.Date VenusSet = entity.getVenusSet();
        if (VenusSet != null) {
            stmt.bindLong(8, VenusSet.getTime());
        }
 
        java.util.Date MarsRise = entity.getMarsRise();
        if (MarsRise != null) {
            stmt.bindLong(9, MarsRise.getTime());
        }
 
        java.util.Date MarsSet = entity.getMarsSet();
        if (MarsSet != null) {
            stmt.bindLong(10, MarsSet.getTime());
        }
 
        java.util.Date JupiterRise = entity.getJupiterRise();
        if (JupiterRise != null) {
            stmt.bindLong(11, JupiterRise.getTime());
        }
 
        java.util.Date JupiterSet = entity.getJupiterSet();
        if (JupiterSet != null) {
            stmt.bindLong(12, JupiterSet.getTime());
        }
 
        java.util.Date SaturnRise = entity.getSaturnRise();
        if (SaturnRise != null) {
            stmt.bindLong(13, SaturnRise.getTime());
        }
 
        java.util.Date SaturnSet = entity.getSaturnSet();
        if (SaturnSet != null) {
            stmt.bindLong(14, SaturnSet.getTime());
        }
 
        java.util.Date UranusRise = entity.getUranusRise();
        if (UranusRise != null) {
            stmt.bindLong(15, UranusRise.getTime());
        }
 
        java.util.Date UranusSet = entity.getUranusSet();
        if (UranusSet != null) {
            stmt.bindLong(16, UranusSet.getTime());
        }
 
        java.util.Date NeptuneRise = entity.getNeptuneRise();
        if (NeptuneRise != null) {
            stmt.bindLong(17, NeptuneRise.getTime());
        }
 
        java.util.Date NeptuneSet = entity.getNeptuneSet();
        if (NeptuneSet != null) {
            stmt.bindLong(18, NeptuneSet.getTime());
        }
 
        java.util.Date PlutoRise = entity.getPlutoRise();
        if (PlutoRise != null) {
            stmt.bindLong(19, PlutoRise.getTime());
        }
 
        java.util.Date PlutoSet = entity.getPlutoSet();
        if (PlutoSet != null) {
            stmt.bindLong(20, PlutoSet.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Planet readEntity(Cursor cursor, int offset) {
        Planet entity = new Planet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ServerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RowId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // InfoDate
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // MercuryRise
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // MercurySet
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // VenusRise
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // VenusSet
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // MarsRise
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // MarsSet
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // JupiterRise
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // JupiterSet
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // SaturnRise
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // SaturnSet
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // UranusRise
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // UranusSet
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // NeptuneRise
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // NeptuneSet
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // PlutoRise
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)) // PlutoSet
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Planet entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRowId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInfoDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setMercuryRise(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setMercurySet(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setVenusRise(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setVenusSet(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setMarsRise(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setMarsSet(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setJupiterRise(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setJupiterSet(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setSaturnRise(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setSaturnSet(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setUranusRise(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setUranusSet(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setNeptuneRise(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setNeptuneSet(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setPlutoRise(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setPlutoSet(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Planet entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Planet entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
