package com.health.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.health.data.BodyFeeling;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tblbodyfeeling.
*/
public class BodyFeelingDao extends AbstractDao<BodyFeeling, Long> {

    public static final String TABLENAME = "tblbodyfeeling";

    /**
     * Properties of entity BodyFeeling.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property ServerId = new Property(1, Long.class, "ServerId", false, "serverid");
        public final static Property RowId = new Property(2, String.class, "RowId", false, "rowid");
        public final static Property UserId = new Property(3, Long.class, "UserId", false, "userid");
        public final static Property X = new Property(4, Integer.class, "X", false, "x");
        public final static Property Y = new Property(5, Integer.class, "Y", false, "y");
        public final static Property StartDate = new Property(6, java.util.Date.class, "StartDate", false, "dt");
        public final static Property FeelingTypeId = new Property(7, Long.class, "FeelingTypeId", false, "feelingtypeid");
        public final static Property CustomFeelingTypeId = new Property(8, Long.class, "CustomFeelingTypeId", false, "customfeelingtypeid");
        public final static Property BodyRegionId = new Property(9, Long.class, "BodyRegionId", false, "bodyregionid");
    };

    private DaoSession daoSession;


    public BodyFeelingDao(DaoConfig config) {
        super(config);
    }
    
    public BodyFeelingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tblbodyfeeling' (" + //
                "'id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'serverid' INTEGER UNIQUE ," + // 1: ServerId
                "'rowid' TEXT UNIQUE ," + // 2: RowId
                "'userid' INTEGER," + // 3: UserId
                "'x' INTEGER," + // 4: X
                "'y' INTEGER," + // 5: Y
                "'dt' INTEGER," + // 6: StartDate
                "'feelingtypeid' INTEGER," + // 7: FeelingTypeId
                "'customfeelingtypeid' INTEGER," + // 8: CustomFeelingTypeId
                "'bodyregionid' INTEGER);"); // 9: BodyRegionId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_tblbodyfeeling_serverid ON tblbodyfeeling" +
                " (serverid);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_tblbodyfeeling_userid ON tblbodyfeeling" +
                " (userid);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_tblbodyfeeling_feelingtypeid ON tblbodyfeeling" +
                " (feelingtypeid);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_tblbodyfeeling_customfeelingtypeid ON tblbodyfeeling" +
                " (customfeelingtypeid);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_tblbodyfeeling_bodyregionid ON tblbodyfeeling" +
                " (bodyregionid);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tblbodyfeeling'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BodyFeeling entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ServerId = entity.getServerId();
        if (ServerId != null) {
            stmt.bindLong(2, ServerId);
        }
 
        String RowId = entity.getRowId();
        if (RowId != null) {
            stmt.bindString(3, RowId);
        }
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(4, UserId);
        }
 
        Integer X = entity.getX();
        if (X != null) {
            stmt.bindLong(5, X);
        }
 
        Integer Y = entity.getY();
        if (Y != null) {
            stmt.bindLong(6, Y);
        }
 
        java.util.Date StartDate = entity.getStartDate();
        if (StartDate != null) {
            stmt.bindLong(7, StartDate.getTime());
        }
 
        Long FeelingTypeId = entity.getFeelingTypeId();
        if (FeelingTypeId != null) {
            stmt.bindLong(8, FeelingTypeId);
        }
 
        Long CustomFeelingTypeId = entity.getCustomFeelingTypeId();
        if (CustomFeelingTypeId != null) {
            stmt.bindLong(9, CustomFeelingTypeId);
        }
 
        Long BodyRegionId = entity.getBodyRegionId();
        if (BodyRegionId != null) {
            stmt.bindLong(10, BodyRegionId);
        }
    }

    @Override
    protected void attachEntity(BodyFeeling entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BodyFeeling readEntity(Cursor cursor, int offset) {
        BodyFeeling entity = new BodyFeeling( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ServerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RowId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // UserId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // X
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // Y
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // StartDate
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // FeelingTypeId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // CustomFeelingTypeId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // BodyRegionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BodyFeeling entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRowId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setX(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setY(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStartDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setFeelingTypeId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setCustomFeelingTypeId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setBodyRegionId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BodyFeeling entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BodyFeeling entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBodyFeelingTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCustomBodyFeelingTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getBodyRegionDao().getAllColumns());
            builder.append(" FROM tblbodyfeeling T");
            builder.append(" LEFT JOIN tblbodyfeelingtype T0 ON T.'feelingtypeid'=T0.'id'");
            builder.append(" LEFT JOIN tblcustombodyfeelingtype T1 ON T.'customfeelingtypeid'=T1.'id'");
            builder.append(" LEFT JOIN tblbodyregion T2 ON T.'bodyregionid'=T2.'id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BodyFeeling loadCurrentDeep(Cursor cursor, boolean lock) {
        BodyFeeling entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        BodyFeelingType bodyFeelingType = loadCurrentOther(daoSession.getBodyFeelingTypeDao(), cursor, offset);
        entity.setBodyFeelingType(bodyFeelingType);
        offset += daoSession.getBodyFeelingTypeDao().getAllColumns().length;

        CustomBodyFeelingType customBodyFeelingType = loadCurrentOther(daoSession.getCustomBodyFeelingTypeDao(), cursor, offset);
        entity.setCustomBodyFeelingType(customBodyFeelingType);
        offset += daoSession.getCustomBodyFeelingTypeDao().getAllColumns().length;

        BodyRegion bodyRegion = loadCurrentOther(daoSession.getBodyRegionDao(), cursor, offset);
        entity.setBodyRegion(bodyRegion);

        return entity;    
    }

    public BodyFeeling loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BodyFeeling> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BodyFeeling> list = new ArrayList<BodyFeeling>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BodyFeeling> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BodyFeeling> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
