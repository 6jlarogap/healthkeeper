package com.health.data;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.health.data.BaseDTO;
import com.health.data.BaseSyncDTO;
import com.health.data.BaseUserSyncDTO;
import com.health.data.BodyFeelingType;
import com.health.data.BodyComplaintType;
import com.health.data.BodyRegion;
import com.health.data.CustomBodyFeelingType;
import com.health.data.BodyFeeling;
import com.health.data.Country;
import com.health.data.City;
import com.health.data.RecoveryAccountQuestion;
import com.health.data.User;
import com.health.data.CommonFeelingGroup;
import com.health.data.UnitDimension;
import com.health.data.CommonFeelingType;
import com.health.data.CustomCommonFeelingType;
import com.health.data.CommonFeeling;
import com.health.data.FactorGroup;
import com.health.data.FactorType;
import com.health.data.CustomFactorType;
import com.health.data.Factor;
import com.health.data.BodyRegion_BodyFeelingType;
import com.health.data.CloudyType;
import com.health.data.WindDirectionType;
import com.health.data.ZodiakType;
import com.health.data.Complaint;
import com.health.data.DownloadPeriod;
import com.health.data.GeoPhysics;
import com.health.data.HelioPhysics;
import com.health.data.KpIndex;
import com.health.data.MoonPhase;
import com.health.data.Moon;
import com.health.data.Particle;
import com.health.data.Planet;
import com.health.data.SolarEclipse;
import com.health.data.Sun;
import com.health.data.Weather;
import com.health.data.UserBodyFeelingType;
import com.health.data.OperationUserData;

import com.health.data.BaseDTODao;
import com.health.data.BaseSyncDTODao;
import com.health.data.BaseUserSyncDTODao;
import com.health.data.BodyFeelingTypeDao;
import com.health.data.BodyComplaintTypeDao;
import com.health.data.BodyRegionDao;
import com.health.data.CustomBodyFeelingTypeDao;
import com.health.data.BodyFeelingDao;
import com.health.data.CountryDao;
import com.health.data.CityDao;
import com.health.data.RecoveryAccountQuestionDao;
import com.health.data.UserDao;
import com.health.data.CommonFeelingGroupDao;
import com.health.data.UnitDimensionDao;
import com.health.data.CommonFeelingTypeDao;
import com.health.data.CustomCommonFeelingTypeDao;
import com.health.data.CommonFeelingDao;
import com.health.data.FactorGroupDao;
import com.health.data.FactorTypeDao;
import com.health.data.CustomFactorTypeDao;
import com.health.data.FactorDao;
import com.health.data.BodyRegion_BodyFeelingTypeDao;
import com.health.data.CloudyTypeDao;
import com.health.data.WindDirectionTypeDao;
import com.health.data.ZodiakTypeDao;
import com.health.data.ComplaintDao;
import com.health.data.DownloadPeriodDao;
import com.health.data.GeoPhysicsDao;
import com.health.data.HelioPhysicsDao;
import com.health.data.KpIndexDao;
import com.health.data.MoonPhaseDao;
import com.health.data.MoonDao;
import com.health.data.ParticleDao;
import com.health.data.PlanetDao;
import com.health.data.SolarEclipseDao;
import com.health.data.SunDao;
import com.health.data.WeatherDao;
import com.health.data.UserBodyFeelingTypeDao;
import com.health.data.OperationUserDataDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig baseDTODaoConfig;
    private final DaoConfig baseSyncDTODaoConfig;
    private final DaoConfig baseUserSyncDTODaoConfig;
    private final DaoConfig bodyFeelingTypeDaoConfig;
    private final DaoConfig bodyComplaintTypeDaoConfig;
    private final DaoConfig bodyRegionDaoConfig;
    private final DaoConfig customBodyFeelingTypeDaoConfig;
    private final DaoConfig bodyFeelingDaoConfig;
    private final DaoConfig countryDaoConfig;
    private final DaoConfig cityDaoConfig;
    private final DaoConfig recoveryAccountQuestionDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig commonFeelingGroupDaoConfig;
    private final DaoConfig unitDimensionDaoConfig;
    private final DaoConfig commonFeelingTypeDaoConfig;
    private final DaoConfig customCommonFeelingTypeDaoConfig;
    private final DaoConfig commonFeelingDaoConfig;
    private final DaoConfig factorGroupDaoConfig;
    private final DaoConfig factorTypeDaoConfig;
    private final DaoConfig customFactorTypeDaoConfig;
    private final DaoConfig factorDaoConfig;
    private final DaoConfig bodyRegion_BodyFeelingTypeDaoConfig;
    private final DaoConfig cloudyTypeDaoConfig;
    private final DaoConfig windDirectionTypeDaoConfig;
    private final DaoConfig zodiakTypeDaoConfig;
    private final DaoConfig complaintDaoConfig;
    private final DaoConfig downloadPeriodDaoConfig;
    private final DaoConfig geoPhysicsDaoConfig;
    private final DaoConfig helioPhysicsDaoConfig;
    private final DaoConfig kpIndexDaoConfig;
    private final DaoConfig moonPhaseDaoConfig;
    private final DaoConfig moonDaoConfig;
    private final DaoConfig particleDaoConfig;
    private final DaoConfig planetDaoConfig;
    private final DaoConfig solarEclipseDaoConfig;
    private final DaoConfig sunDaoConfig;
    private final DaoConfig weatherDaoConfig;
    private final DaoConfig userBodyFeelingTypeDaoConfig;
    private final DaoConfig operationUserDataDaoConfig;

    private final BaseDTODao baseDTODao;
    private final BaseSyncDTODao baseSyncDTODao;
    private final BaseUserSyncDTODao baseUserSyncDTODao;
    private final BodyFeelingTypeDao bodyFeelingTypeDao;
    private final BodyComplaintTypeDao bodyComplaintTypeDao;
    private final BodyRegionDao bodyRegionDao;
    private final CustomBodyFeelingTypeDao customBodyFeelingTypeDao;
    private final BodyFeelingDao bodyFeelingDao;
    private final CountryDao countryDao;
    private final CityDao cityDao;
    private final RecoveryAccountQuestionDao recoveryAccountQuestionDao;
    private final UserDao userDao;
    private final CommonFeelingGroupDao commonFeelingGroupDao;
    private final UnitDimensionDao unitDimensionDao;
    private final CommonFeelingTypeDao commonFeelingTypeDao;
    private final CustomCommonFeelingTypeDao customCommonFeelingTypeDao;
    private final CommonFeelingDao commonFeelingDao;
    private final FactorGroupDao factorGroupDao;
    private final FactorTypeDao factorTypeDao;
    private final CustomFactorTypeDao customFactorTypeDao;
    private final FactorDao factorDao;
    private final BodyRegion_BodyFeelingTypeDao bodyRegion_BodyFeelingTypeDao;
    private final CloudyTypeDao cloudyTypeDao;
    private final WindDirectionTypeDao windDirectionTypeDao;
    private final ZodiakTypeDao zodiakTypeDao;
    private final ComplaintDao complaintDao;
    private final DownloadPeriodDao downloadPeriodDao;
    private final GeoPhysicsDao geoPhysicsDao;
    private final HelioPhysicsDao helioPhysicsDao;
    private final KpIndexDao kpIndexDao;
    private final MoonPhaseDao moonPhaseDao;
    private final MoonDao moonDao;
    private final ParticleDao particleDao;
    private final PlanetDao planetDao;
    private final SolarEclipseDao solarEclipseDao;
    private final SunDao sunDao;
    private final WeatherDao weatherDao;
    private final UserBodyFeelingTypeDao userBodyFeelingTypeDao;
    private final OperationUserDataDao operationUserDataDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        baseDTODaoConfig = daoConfigMap.get(BaseDTODao.class).clone();
        baseDTODaoConfig.initIdentityScope(type);

        baseSyncDTODaoConfig = daoConfigMap.get(BaseSyncDTODao.class).clone();
        baseSyncDTODaoConfig.initIdentityScope(type);

        baseUserSyncDTODaoConfig = daoConfigMap.get(BaseUserSyncDTODao.class).clone();
        baseUserSyncDTODaoConfig.initIdentityScope(type);

        bodyFeelingTypeDaoConfig = daoConfigMap.get(BodyFeelingTypeDao.class).clone();
        bodyFeelingTypeDaoConfig.initIdentityScope(type);

        bodyComplaintTypeDaoConfig = daoConfigMap.get(BodyComplaintTypeDao.class).clone();
        bodyComplaintTypeDaoConfig.initIdentityScope(type);

        bodyRegionDaoConfig = daoConfigMap.get(BodyRegionDao.class).clone();
        bodyRegionDaoConfig.initIdentityScope(type);

        customBodyFeelingTypeDaoConfig = daoConfigMap.get(CustomBodyFeelingTypeDao.class).clone();
        customBodyFeelingTypeDaoConfig.initIdentityScope(type);

        bodyFeelingDaoConfig = daoConfigMap.get(BodyFeelingDao.class).clone();
        bodyFeelingDaoConfig.initIdentityScope(type);

        countryDaoConfig = daoConfigMap.get(CountryDao.class).clone();
        countryDaoConfig.initIdentityScope(type);

        cityDaoConfig = daoConfigMap.get(CityDao.class).clone();
        cityDaoConfig.initIdentityScope(type);

        recoveryAccountQuestionDaoConfig = daoConfigMap.get(RecoveryAccountQuestionDao.class).clone();
        recoveryAccountQuestionDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        commonFeelingGroupDaoConfig = daoConfigMap.get(CommonFeelingGroupDao.class).clone();
        commonFeelingGroupDaoConfig.initIdentityScope(type);

        unitDimensionDaoConfig = daoConfigMap.get(UnitDimensionDao.class).clone();
        unitDimensionDaoConfig.initIdentityScope(type);

        commonFeelingTypeDaoConfig = daoConfigMap.get(CommonFeelingTypeDao.class).clone();
        commonFeelingTypeDaoConfig.initIdentityScope(type);

        customCommonFeelingTypeDaoConfig = daoConfigMap.get(CustomCommonFeelingTypeDao.class).clone();
        customCommonFeelingTypeDaoConfig.initIdentityScope(type);

        commonFeelingDaoConfig = daoConfigMap.get(CommonFeelingDao.class).clone();
        commonFeelingDaoConfig.initIdentityScope(type);

        factorGroupDaoConfig = daoConfigMap.get(FactorGroupDao.class).clone();
        factorGroupDaoConfig.initIdentityScope(type);

        factorTypeDaoConfig = daoConfigMap.get(FactorTypeDao.class).clone();
        factorTypeDaoConfig.initIdentityScope(type);

        customFactorTypeDaoConfig = daoConfigMap.get(CustomFactorTypeDao.class).clone();
        customFactorTypeDaoConfig.initIdentityScope(type);

        factorDaoConfig = daoConfigMap.get(FactorDao.class).clone();
        factorDaoConfig.initIdentityScope(type);

        bodyRegion_BodyFeelingTypeDaoConfig = daoConfigMap.get(BodyRegion_BodyFeelingTypeDao.class).clone();
        bodyRegion_BodyFeelingTypeDaoConfig.initIdentityScope(type);

        cloudyTypeDaoConfig = daoConfigMap.get(CloudyTypeDao.class).clone();
        cloudyTypeDaoConfig.initIdentityScope(type);

        windDirectionTypeDaoConfig = daoConfigMap.get(WindDirectionTypeDao.class).clone();
        windDirectionTypeDaoConfig.initIdentityScope(type);

        zodiakTypeDaoConfig = daoConfigMap.get(ZodiakTypeDao.class).clone();
        zodiakTypeDaoConfig.initIdentityScope(type);

        complaintDaoConfig = daoConfigMap.get(ComplaintDao.class).clone();
        complaintDaoConfig.initIdentityScope(type);

        downloadPeriodDaoConfig = daoConfigMap.get(DownloadPeriodDao.class).clone();
        downloadPeriodDaoConfig.initIdentityScope(type);

        geoPhysicsDaoConfig = daoConfigMap.get(GeoPhysicsDao.class).clone();
        geoPhysicsDaoConfig.initIdentityScope(type);

        helioPhysicsDaoConfig = daoConfigMap.get(HelioPhysicsDao.class).clone();
        helioPhysicsDaoConfig.initIdentityScope(type);

        kpIndexDaoConfig = daoConfigMap.get(KpIndexDao.class).clone();
        kpIndexDaoConfig.initIdentityScope(type);

        moonPhaseDaoConfig = daoConfigMap.get(MoonPhaseDao.class).clone();
        moonPhaseDaoConfig.initIdentityScope(type);

        moonDaoConfig = daoConfigMap.get(MoonDao.class).clone();
        moonDaoConfig.initIdentityScope(type);

        particleDaoConfig = daoConfigMap.get(ParticleDao.class).clone();
        particleDaoConfig.initIdentityScope(type);

        planetDaoConfig = daoConfigMap.get(PlanetDao.class).clone();
        planetDaoConfig.initIdentityScope(type);

        solarEclipseDaoConfig = daoConfigMap.get(SolarEclipseDao.class).clone();
        solarEclipseDaoConfig.initIdentityScope(type);

        sunDaoConfig = daoConfigMap.get(SunDao.class).clone();
        sunDaoConfig.initIdentityScope(type);

        weatherDaoConfig = daoConfigMap.get(WeatherDao.class).clone();
        weatherDaoConfig.initIdentityScope(type);

        userBodyFeelingTypeDaoConfig = daoConfigMap.get(UserBodyFeelingTypeDao.class).clone();
        userBodyFeelingTypeDaoConfig.initIdentityScope(type);

        operationUserDataDaoConfig = daoConfigMap.get(OperationUserDataDao.class).clone();
        operationUserDataDaoConfig.initIdentityScope(type);

        baseDTODao = new BaseDTODao(baseDTODaoConfig, this);
        baseSyncDTODao = new BaseSyncDTODao(baseSyncDTODaoConfig, this);
        baseUserSyncDTODao = new BaseUserSyncDTODao(baseUserSyncDTODaoConfig, this);
        bodyFeelingTypeDao = new BodyFeelingTypeDao(bodyFeelingTypeDaoConfig, this);
        bodyComplaintTypeDao = new BodyComplaintTypeDao(bodyComplaintTypeDaoConfig, this);
        bodyRegionDao = new BodyRegionDao(bodyRegionDaoConfig, this);
        customBodyFeelingTypeDao = new CustomBodyFeelingTypeDao(customBodyFeelingTypeDaoConfig, this);
        bodyFeelingDao = new BodyFeelingDao(bodyFeelingDaoConfig, this);
        countryDao = new CountryDao(countryDaoConfig, this);
        cityDao = new CityDao(cityDaoConfig, this);
        recoveryAccountQuestionDao = new RecoveryAccountQuestionDao(recoveryAccountQuestionDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        commonFeelingGroupDao = new CommonFeelingGroupDao(commonFeelingGroupDaoConfig, this);
        unitDimensionDao = new UnitDimensionDao(unitDimensionDaoConfig, this);
        commonFeelingTypeDao = new CommonFeelingTypeDao(commonFeelingTypeDaoConfig, this);
        customCommonFeelingTypeDao = new CustomCommonFeelingTypeDao(customCommonFeelingTypeDaoConfig, this);
        commonFeelingDao = new CommonFeelingDao(commonFeelingDaoConfig, this);
        factorGroupDao = new FactorGroupDao(factorGroupDaoConfig, this);
        factorTypeDao = new FactorTypeDao(factorTypeDaoConfig, this);
        customFactorTypeDao = new CustomFactorTypeDao(customFactorTypeDaoConfig, this);
        factorDao = new FactorDao(factorDaoConfig, this);
        bodyRegion_BodyFeelingTypeDao = new BodyRegion_BodyFeelingTypeDao(bodyRegion_BodyFeelingTypeDaoConfig, this);
        cloudyTypeDao = new CloudyTypeDao(cloudyTypeDaoConfig, this);
        windDirectionTypeDao = new WindDirectionTypeDao(windDirectionTypeDaoConfig, this);
        zodiakTypeDao = new ZodiakTypeDao(zodiakTypeDaoConfig, this);
        complaintDao = new ComplaintDao(complaintDaoConfig, this);
        downloadPeriodDao = new DownloadPeriodDao(downloadPeriodDaoConfig, this);
        geoPhysicsDao = new GeoPhysicsDao(geoPhysicsDaoConfig, this);
        helioPhysicsDao = new HelioPhysicsDao(helioPhysicsDaoConfig, this);
        kpIndexDao = new KpIndexDao(kpIndexDaoConfig, this);
        moonPhaseDao = new MoonPhaseDao(moonPhaseDaoConfig, this);
        moonDao = new MoonDao(moonDaoConfig, this);
        particleDao = new ParticleDao(particleDaoConfig, this);
        planetDao = new PlanetDao(planetDaoConfig, this);
        solarEclipseDao = new SolarEclipseDao(solarEclipseDaoConfig, this);
        sunDao = new SunDao(sunDaoConfig, this);
        weatherDao = new WeatherDao(weatherDaoConfig, this);
        userBodyFeelingTypeDao = new UserBodyFeelingTypeDao(userBodyFeelingTypeDaoConfig, this);
        operationUserDataDao = new OperationUserDataDao(operationUserDataDaoConfig, this);

        registerDao(BaseDTO.class, baseDTODao);
        registerDao(BaseSyncDTO.class, baseSyncDTODao);
        registerDao(BaseUserSyncDTO.class, baseUserSyncDTODao);
        registerDao(BodyFeelingType.class, bodyFeelingTypeDao);
        registerDao(BodyComplaintType.class, bodyComplaintTypeDao);
        registerDao(BodyRegion.class, bodyRegionDao);
        registerDao(CustomBodyFeelingType.class, customBodyFeelingTypeDao);
        registerDao(BodyFeeling.class, bodyFeelingDao);
        registerDao(Country.class, countryDao);
        registerDao(City.class, cityDao);
        registerDao(RecoveryAccountQuestion.class, recoveryAccountQuestionDao);
        registerDao(User.class, userDao);
        registerDao(CommonFeelingGroup.class, commonFeelingGroupDao);
        registerDao(UnitDimension.class, unitDimensionDao);
        registerDao(CommonFeelingType.class, commonFeelingTypeDao);
        registerDao(CustomCommonFeelingType.class, customCommonFeelingTypeDao);
        registerDao(CommonFeeling.class, commonFeelingDao);
        registerDao(FactorGroup.class, factorGroupDao);
        registerDao(FactorType.class, factorTypeDao);
        registerDao(CustomFactorType.class, customFactorTypeDao);
        registerDao(Factor.class, factorDao);
        registerDao(BodyRegion_BodyFeelingType.class, bodyRegion_BodyFeelingTypeDao);
        registerDao(CloudyType.class, cloudyTypeDao);
        registerDao(WindDirectionType.class, windDirectionTypeDao);
        registerDao(ZodiakType.class, zodiakTypeDao);
        registerDao(Complaint.class, complaintDao);
        registerDao(DownloadPeriod.class, downloadPeriodDao);
        registerDao(GeoPhysics.class, geoPhysicsDao);
        registerDao(HelioPhysics.class, helioPhysicsDao);
        registerDao(KpIndex.class, kpIndexDao);
        registerDao(MoonPhase.class, moonPhaseDao);
        registerDao(Moon.class, moonDao);
        registerDao(Particle.class, particleDao);
        registerDao(Planet.class, planetDao);
        registerDao(SolarEclipse.class, solarEclipseDao);
        registerDao(Sun.class, sunDao);
        registerDao(Weather.class, weatherDao);
        registerDao(UserBodyFeelingType.class, userBodyFeelingTypeDao);
        registerDao(OperationUserData.class, operationUserDataDao);
    }
    
    public void clear() {
        baseDTODaoConfig.getIdentityScope().clear();
        baseSyncDTODaoConfig.getIdentityScope().clear();
        baseUserSyncDTODaoConfig.getIdentityScope().clear();
        bodyFeelingTypeDaoConfig.getIdentityScope().clear();
        bodyComplaintTypeDaoConfig.getIdentityScope().clear();
        bodyRegionDaoConfig.getIdentityScope().clear();
        customBodyFeelingTypeDaoConfig.getIdentityScope().clear();
        bodyFeelingDaoConfig.getIdentityScope().clear();
        countryDaoConfig.getIdentityScope().clear();
        cityDaoConfig.getIdentityScope().clear();
        recoveryAccountQuestionDaoConfig.getIdentityScope().clear();
        userDaoConfig.getIdentityScope().clear();
        commonFeelingGroupDaoConfig.getIdentityScope().clear();
        unitDimensionDaoConfig.getIdentityScope().clear();
        commonFeelingTypeDaoConfig.getIdentityScope().clear();
        customCommonFeelingTypeDaoConfig.getIdentityScope().clear();
        commonFeelingDaoConfig.getIdentityScope().clear();
        factorGroupDaoConfig.getIdentityScope().clear();
        factorTypeDaoConfig.getIdentityScope().clear();
        customFactorTypeDaoConfig.getIdentityScope().clear();
        factorDaoConfig.getIdentityScope().clear();
        bodyRegion_BodyFeelingTypeDaoConfig.getIdentityScope().clear();
        cloudyTypeDaoConfig.getIdentityScope().clear();
        windDirectionTypeDaoConfig.getIdentityScope().clear();
        zodiakTypeDaoConfig.getIdentityScope().clear();
        complaintDaoConfig.getIdentityScope().clear();
        downloadPeriodDaoConfig.getIdentityScope().clear();
        geoPhysicsDaoConfig.getIdentityScope().clear();
        helioPhysicsDaoConfig.getIdentityScope().clear();
        kpIndexDaoConfig.getIdentityScope().clear();
        moonPhaseDaoConfig.getIdentityScope().clear();
        moonDaoConfig.getIdentityScope().clear();
        particleDaoConfig.getIdentityScope().clear();
        planetDaoConfig.getIdentityScope().clear();
        solarEclipseDaoConfig.getIdentityScope().clear();
        sunDaoConfig.getIdentityScope().clear();
        weatherDaoConfig.getIdentityScope().clear();
        userBodyFeelingTypeDaoConfig.getIdentityScope().clear();
        operationUserDataDaoConfig.getIdentityScope().clear();
    }

    public BaseDTODao getBaseDTODao() {
        return baseDTODao;
    }

    public BaseSyncDTODao getBaseSyncDTODao() {
        return baseSyncDTODao;
    }

    public BaseUserSyncDTODao getBaseUserSyncDTODao() {
        return baseUserSyncDTODao;
    }

    public BodyFeelingTypeDao getBodyFeelingTypeDao() {
        return bodyFeelingTypeDao;
    }

    public BodyComplaintTypeDao getBodyComplaintTypeDao() {
        return bodyComplaintTypeDao;
    }

    public BodyRegionDao getBodyRegionDao() {
        return bodyRegionDao;
    }

    public CustomBodyFeelingTypeDao getCustomBodyFeelingTypeDao() {
        return customBodyFeelingTypeDao;
    }

    public BodyFeelingDao getBodyFeelingDao() {
        return bodyFeelingDao;
    }

    public CountryDao getCountryDao() {
        return countryDao;
    }

    public CityDao getCityDao() {
        return cityDao;
    }

    public RecoveryAccountQuestionDao getRecoveryAccountQuestionDao() {
        return recoveryAccountQuestionDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public CommonFeelingGroupDao getCommonFeelingGroupDao() {
        return commonFeelingGroupDao;
    }

    public UnitDimensionDao getUnitDimensionDao() {
        return unitDimensionDao;
    }

    public CommonFeelingTypeDao getCommonFeelingTypeDao() {
        return commonFeelingTypeDao;
    }

    public CustomCommonFeelingTypeDao getCustomCommonFeelingTypeDao() {
        return customCommonFeelingTypeDao;
    }

    public CommonFeelingDao getCommonFeelingDao() {
        return commonFeelingDao;
    }

    public FactorGroupDao getFactorGroupDao() {
        return factorGroupDao;
    }

    public FactorTypeDao getFactorTypeDao() {
        return factorTypeDao;
    }

    public CustomFactorTypeDao getCustomFactorTypeDao() {
        return customFactorTypeDao;
    }

    public FactorDao getFactorDao() {
        return factorDao;
    }

    public BodyRegion_BodyFeelingTypeDao getBodyRegion_BodyFeelingTypeDao() {
        return bodyRegion_BodyFeelingTypeDao;
    }

    public CloudyTypeDao getCloudyTypeDao() {
        return cloudyTypeDao;
    }

    public WindDirectionTypeDao getWindDirectionTypeDao() {
        return windDirectionTypeDao;
    }

    public ZodiakTypeDao getZodiakTypeDao() {
        return zodiakTypeDao;
    }

    public ComplaintDao getComplaintDao() {
        return complaintDao;
    }

    public DownloadPeriodDao getDownloadPeriodDao() {
        return downloadPeriodDao;
    }

    public GeoPhysicsDao getGeoPhysicsDao() {
        return geoPhysicsDao;
    }

    public HelioPhysicsDao getHelioPhysicsDao() {
        return helioPhysicsDao;
    }

    public KpIndexDao getKpIndexDao() {
        return kpIndexDao;
    }

    public MoonPhaseDao getMoonPhaseDao() {
        return moonPhaseDao;
    }

    public MoonDao getMoonDao() {
        return moonDao;
    }

    public ParticleDao getParticleDao() {
        return particleDao;
    }

    public PlanetDao getPlanetDao() {
        return planetDao;
    }

    public SolarEclipseDao getSolarEclipseDao() {
        return solarEclipseDao;
    }

    public SunDao getSunDao() {
        return sunDao;
    }

    public WeatherDao getWeatherDao() {
        return weatherDao;
    }

    public UserBodyFeelingTypeDao getUserBodyFeelingTypeDao() {
        return userBodyFeelingTypeDao;
    }

    public OperationUserDataDao getOperationUserDataDao() {
        return operationUserDataDao;
    }

}
