package com.health.data;

import com.health.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table tblcommonfeeling.
 */
public class CommonFeeling implements IFeeling, IGridItemValue {

    private Long id;
    private Long ServerId;
    private String RowId;
    private Long UserId;
    private java.util.Date StartDate;
    private Double Value1;
    private Double Value2;
    private Double Value3;
    private Long CommonFeelingTypeId;
    private Long CustomCommonFeelingTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CommonFeelingDao myDao;

    private CommonFeelingType commonFeelingType;
    private Long commonFeelingType__resolvedKey;

    private CustomCommonFeelingType customCommonFeelingType;
    private Long customCommonFeelingType__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    public static final String COMMON_FEELING_TYPE_COLUMN_NAME = "feelingtypeid";
    public static final String CUSTOM_COMMON_FEELING_TYPE_COLUMN_NAME = "customfeelingtypeid";
    public static final String START_DATE_COLUMN_NAME = "StartDate";

    public static final String VALUE1_COLUMN_NAME = "value1";
    public static final String VALUE2_COLUMN_NAME = "value2";
    public static final String VALUE3_COLUMN_NAME = "value3";
    
    public int OperationTypeId;
    public Long CustomCommonFeelingTypeServerId;
    // KEEP FIELDS END

    public CommonFeeling() {
    }

    public CommonFeeling(Long id) {
        this.id = id;
    }

    public CommonFeeling(Long id, Long ServerId, String RowId, Long UserId, java.util.Date StartDate, Double Value1, Double Value2, Double Value3, Long CommonFeelingTypeId, Long CustomCommonFeelingTypeId) {
        this.id = id;
        this.ServerId = ServerId;
        this.RowId = RowId;
        this.UserId = UserId;
        this.StartDate = StartDate;
        this.Value1 = Value1;
        this.Value2 = Value2;
        this.Value3 = Value3;
        this.CommonFeelingTypeId = CommonFeelingTypeId;
        this.CustomCommonFeelingTypeId = CustomCommonFeelingTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCommonFeelingDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getServerId() {
        return ServerId;
    }

    public void setServerId(Long ServerId) {
        this.ServerId = ServerId;
    }

    public String getRowId() {
        return RowId;
    }

    public void setRowId(String RowId) {
        this.RowId = RowId;
    }

    public Long getUserId() {
        return UserId;
    }

    public void setUserId(Long UserId) {
        this.UserId = UserId;
    }

    public java.util.Date getStartDate() {
        return StartDate;
    }

    public void setStartDate(java.util.Date StartDate) {
        this.StartDate = StartDate;
    }

    public Double getValue1() {
        return Value1;
    }

    public void setValue1(Double Value1) {
        this.Value1 = Value1;
    }

    public Double getValue2() {
        return Value2;
    }

    public void setValue2(Double Value2) {
        this.Value2 = Value2;
    }

    public Double getValue3() {
        return Value3;
    }

    public void setValue3(Double Value3) {
        this.Value3 = Value3;
    }

    public Long getCommonFeelingTypeId() {
        return CommonFeelingTypeId;
    }

    public void setCommonFeelingTypeId(Long CommonFeelingTypeId) {
        this.CommonFeelingTypeId = CommonFeelingTypeId;
    }

    public Long getCustomCommonFeelingTypeId() {
        return CustomCommonFeelingTypeId;
    }

    public void setCustomCommonFeelingTypeId(Long CustomCommonFeelingTypeId) {
        this.CustomCommonFeelingTypeId = CustomCommonFeelingTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public CommonFeelingType getCommonFeelingType() {
        Long __key = this.CommonFeelingTypeId;
        if (commonFeelingType__resolvedKey == null || !commonFeelingType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CommonFeelingTypeDao targetDao = daoSession.getCommonFeelingTypeDao();
            CommonFeelingType commonFeelingTypeNew = targetDao.load(__key);
            synchronized (this) {
                commonFeelingType = commonFeelingTypeNew;
            	commonFeelingType__resolvedKey = __key;
            }
        }
        return commonFeelingType;
    }

    public void setCommonFeelingType(CommonFeelingType commonFeelingType) {
        synchronized (this) {
            this.commonFeelingType = commonFeelingType;
            CommonFeelingTypeId = commonFeelingType == null ? null : commonFeelingType.getId();
            commonFeelingType__resolvedKey = CommonFeelingTypeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public CustomCommonFeelingType getCustomCommonFeelingType() {
        Long __key = this.CustomCommonFeelingTypeId;
        if (customCommonFeelingType__resolvedKey == null || !customCommonFeelingType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomCommonFeelingTypeDao targetDao = daoSession.getCustomCommonFeelingTypeDao();
            CustomCommonFeelingType customCommonFeelingTypeNew = targetDao.load(__key);
            synchronized (this) {
                customCommonFeelingType = customCommonFeelingTypeNew;
            	customCommonFeelingType__resolvedKey = __key;
            }
        }
        return customCommonFeelingType;
    }

    public void setCustomCommonFeelingType(CustomCommonFeelingType customCommonFeelingType) {
        synchronized (this) {
            this.customCommonFeelingType = customCommonFeelingType;
            CustomCommonFeelingTypeId = customCommonFeelingType == null ? null : customCommonFeelingType.getId();
            customCommonFeelingType__resolvedKey = CustomCommonFeelingTypeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public IGridItem getGridItem() {
        if(this.CommonFeelingTypeId != null){
            return this.getCommonFeelingType();
        }
        if(this.CustomCommonFeelingTypeId != null){
            return this.getCustomCommonFeelingType();
        }
        return null;
    }


    @Override
    public void setGridItem(IGridItem gridItem) {
        if(gridItem instanceof CommonFeelingType){
            setCommonFeelingType((CommonFeelingType) gridItem);
        }
        if(gridItem instanceof CustomCommonFeelingType){
            setCustomCommonFeelingType((CustomCommonFeelingType) gridItem);
        }
    }

    @Override
    public String getName() {
        if(this.CommonFeelingTypeId != null){
            return this.getCommonFeelingType().getName();
        } else {
            return this.getCustomCommonFeelingType().getName();
        }

    }
    // KEEP METHODS END

}
