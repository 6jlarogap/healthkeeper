package com.health.data;

import com.health.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.health.db.DB;
import com.health.db.UserDB;
import de.greenrobot.dao.query.QueryBuilder;
import java.util.Date;
import java.util.List;
import java.util.UUID;
// KEEP INCLUDES END
/**
 * Entity mapped to table tbloperationuserdata.
 */
public class OperationUserData {

    private Long id;
    private Long ClientId;
    private Long ServerId;
    private Integer OperationType;
    private Integer TableId;
    private java.util.Date OperationDate;
    private String RowId;
    private Long UserId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OperationUserDataDao myDao;

    private User user;
    private Long user__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    public final static String COLUMN_SERVER_ID = "ServerId";
    public final static String COLUMN_CLIENT_ID = "ClientId";
    public final static String COLUMN_TABLE_ID = "TableId";
    
    //–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    public static final int INSERT_OPERATION_TYPE = 1;
    public static final int UPDATE_OPERATION_TYPE = 2;
    public static final int DELETE_OPERATION_TYPE = 3;

    //–?–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    public static final int BODYFEELING_TABLEID = 1;
    public static final int USERBODYFEELINGTYPE_TABLEID = 2;
    public static final int COMMONFEELING_TABLEID = 3;
    public static final int COMPLAINT_TABLEID = 4;
    public static final int CUSTOMBODYFEELINGTYPE_TABLEID = 5;
    public static final int FACTOR_TABLEID = 6;
    public static final int CUSTOMFACTORTYPE_TABLEID = 7;
    public static final int CUSTOMCOMMONFEELINGTYPE_TABLEID = 8;
    // KEEP FIELDS END

    public OperationUserData() {
    }

    public OperationUserData(Long id) {
        this.id = id;
    }

    public OperationUserData(Long id, Long ClientId, Long ServerId, Integer OperationType, Integer TableId, java.util.Date OperationDate, String RowId, Long UserId) {
        this.id = id;
        this.ClientId = ClientId;
        this.ServerId = ServerId;
        this.OperationType = OperationType;
        this.TableId = TableId;
        this.OperationDate = OperationDate;
        this.RowId = RowId;
        this.UserId = UserId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOperationUserDataDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getClientId() {
        return ClientId;
    }

    public void setClientId(Long ClientId) {
        this.ClientId = ClientId;
    }

    public Long getServerId() {
        return ServerId;
    }

    public void setServerId(Long ServerId) {
        this.ServerId = ServerId;
    }

    public Integer getOperationType() {
        return OperationType;
    }

    public void setOperationType(Integer OperationType) {
        this.OperationType = OperationType;
    }

    public Integer getTableId() {
        return TableId;
    }

    public void setTableId(Integer TableId) {
        this.TableId = TableId;
    }

    public java.util.Date getOperationDate() {
        return OperationDate;
    }

    public void setOperationDate(java.util.Date OperationDate) {
        this.OperationDate = OperationDate;
    }

    public String getRowId() {
        return RowId;
    }

    public void setRowId(String RowId) {
        this.RowId = RowId;
    }

    public Long getUserId() {
        return UserId;
    }

    public void setUserId(Long UserId) {
        this.UserId = UserId;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.UserId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            UserId = user == null ? null : user.getId();
            user__resolvedKey = UserId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public static void updateOperationUserData(int tableId, Long clientId, Long serverId, UUID rowid, int operationType){
    	DaoSession daoSession = DB.db().newSession();
        OperationUserData operationUserData = getOperationUserData(tableId, clientId, serverId);
        if(operationUserData != null){
            boolean isDelete = false;
            switch (operationUserData.OperationType) {
                case INSERT_OPERATION_TYPE:
                    switch(operationType){
                        case INSERT_OPERATION_TYPE:
                            operationUserData.OperationType = INSERT_OPERATION_TYPE;
                            break;
                        case UPDATE_OPERATION_TYPE:
                            operationUserData.OperationType = INSERT_OPERATION_TYPE;
                            break;
                        case DELETE_OPERATION_TYPE:
                            isDelete = true;
                            operationUserData.OperationType = DELETE_OPERATION_TYPE;
                            break;
                    }
                    break;
                case UPDATE_OPERATION_TYPE:
                    switch(operationType){
                        case INSERT_OPERATION_TYPE:
                            operationUserData.OperationType = UPDATE_OPERATION_TYPE;
                            break;
                        case UPDATE_OPERATION_TYPE:
                            operationUserData.OperationType = UPDATE_OPERATION_TYPE;
                            break;
                        case DELETE_OPERATION_TYPE:
                            operationUserData.OperationType = DELETE_OPERATION_TYPE;
                            break;
                    }
                    break;
                case DELETE_OPERATION_TYPE:
                    //do nothing
                    break;
                default:
                    break;
            }
            operationUserData.OperationDate = new Date();
            if(isDelete){
            	daoSession.getOperationUserDataDao().delete(operationUserData);                
            } else {
            	daoSession.getOperationUserDataDao().update(operationUserData);
            }
        } else {
            User currentUser = UserDB.getCurrentUser();
            operationUserData = new OperationUserData();            
            operationUserData.UserId = currentUser.getId();
            operationUserData.TableId = tableId;
            operationUserData.ClientId = clientId;
            operationUserData.ServerId = serverId;
            operationUserData.OperationType = operationType;
            operationUserData.OperationDate = new Date();
            operationUserData.RowId = rowid.toString();
            daoSession.getOperationUserDataDao().insert(operationUserData);            
        }
    }

    public static boolean isChangeOnClient(int tableId, Long serverId){
        boolean result = false;
        OperationUserData operationUserData = getOperationUserData(tableId, null, serverId);
        if(operationUserData != null){
            result = true;
        }
        return result;
    }

    public static void deleteOperationUserData(int tableId, long clientId){
    	DaoSession daoSession = DB.db().newSession();
        OperationUserData operationUserData = getOperationUserData(tableId, clientId, null);
        if(operationUserData != null){
        	daoSession.getOperationUserDataDao().delete(operationUserData);
        }
    }

    private static OperationUserData getOperationUserData(int tableId, Long clientId, Long serverId){
    	DaoSession daoSession = DB.db().newSession();
        OperationUserData result = null;        
    	QueryBuilder<OperationUserData> qb =  daoSession.getOperationUserDataDao().queryBuilder().where(OperationUserDataDao.Properties.TableId.eq(tableId));
        if(clientId != null && clientId > 0){                
        	qb = qb.where(OperationUserDataDao.Properties.ClientId.eq(clientId));                
        }
        if(serverId != null && serverId > 0){                
        	qb = qb.where(OperationUserDataDao.Properties.ServerId.eq(serverId));
        }            
        List<OperationUserData> operationUserDataList = qb.list();
        if(operationUserDataList.size() > 0){
            result = operationUserDataList.get(0);
        }        
        return result;
    }

    public static int getTableId(Class<?> clazz){
        int tableId = BaseDTO.INT_NULL_VALUE;
        if (clazz == BodyFeeling.class) {
            tableId = BODYFEELING_TABLEID;
        }
        if (clazz == UserBodyFeelingType.class) {
            tableId = USERBODYFEELINGTYPE_TABLEID;
        }
        if (clazz == CommonFeeling.class) {
            tableId = COMMONFEELING_TABLEID;
        }
        if (clazz == Factor.class) {
            tableId = FACTOR_TABLEID;
        }
        if (clazz == CustomFactorType.class) {
            tableId = CUSTOMFACTORTYPE_TABLEID;
        }
        if (clazz == Complaint.class) {
            tableId = COMPLAINT_TABLEID;
        }
        if (clazz == CustomBodyFeelingType.class) {
            tableId = CUSTOMBODYFEELINGTYPE_TABLEID;
        }
        if (clazz == CustomCommonFeelingType.class) {
            tableId = CUSTOMCOMMONFEELINGTYPE_TABLEID;
        }
        if(tableId >= 0) {
            return tableId;
        } else {
            throw new RuntimeException(String.format("%s - invalid class argument", clazz.getName()));
        }
    }
    // KEEP METHODS END

}
