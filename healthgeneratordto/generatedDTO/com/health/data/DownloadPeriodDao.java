package com.health.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.health.data.DownloadPeriod;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tbldownloadperiod.
*/
public class DownloadPeriodDao extends AbstractDao<DownloadPeriod, Long> {

    public static final String TABLENAME = "tbldownloadperiod";

    /**
     * Properties of entity DownloadPeriod.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property DateFrom = new Property(1, java.util.Date.class, "DateFrom", false, "dtfrom");
        public final static Property DateTo = new Property(2, java.util.Date.class, "DateTo", false, "dtto");
        public final static Property SyncDate = new Property(3, java.util.Date.class, "SyncDate", false, "syncdate");
        public final static Property UserId = new Property(4, Long.class, "UserId", false, "user_id");
        public final static Property CityId = new Property(5, Long.class, "CityId", false, "city_id");
        public final static Property TypeId = new Property(6, Integer.class, "TypeId", false, "typeid");
        public final static Property Result = new Property(7, Integer.class, "Result", false, "result");
    };

    private DaoSession daoSession;


    public DownloadPeriodDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadPeriodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tbldownloadperiod' (" + //
                "'id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'dtfrom' INTEGER," + // 1: DateFrom
                "'dtto' INTEGER," + // 2: DateTo
                "'syncdate' INTEGER," + // 3: SyncDate
                "'user_id' INTEGER," + // 4: UserId
                "'city_id' INTEGER," + // 5: CityId
                "'typeid' INTEGER," + // 6: TypeId
                "'result' INTEGER);"); // 7: Result
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_tbldownloadperiod_user_id ON tbldownloadperiod" +
                " (user_id);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_tbldownloadperiod_city_id ON tbldownloadperiod" +
                " (city_id);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tbldownloadperiod'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DownloadPeriod entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date DateFrom = entity.getDateFrom();
        if (DateFrom != null) {
            stmt.bindLong(2, DateFrom.getTime());
        }
 
        java.util.Date DateTo = entity.getDateTo();
        if (DateTo != null) {
            stmt.bindLong(3, DateTo.getTime());
        }
 
        java.util.Date SyncDate = entity.getSyncDate();
        if (SyncDate != null) {
            stmt.bindLong(4, SyncDate.getTime());
        }
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(5, UserId);
        }
 
        Long CityId = entity.getCityId();
        if (CityId != null) {
            stmt.bindLong(6, CityId);
        }
 
        Integer TypeId = entity.getTypeId();
        if (TypeId != null) {
            stmt.bindLong(7, TypeId);
        }
 
        Integer Result = entity.getResult();
        if (Result != null) {
            stmt.bindLong(8, Result);
        }
    }

    @Override
    protected void attachEntity(DownloadPeriod entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DownloadPeriod readEntity(Cursor cursor, int offset) {
        DownloadPeriod entity = new DownloadPeriod( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // DateFrom
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // DateTo
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // SyncDate
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // UserId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // CityId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // TypeId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // Result
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DownloadPeriod entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDateFrom(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setDateTo(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setSyncDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCityId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTypeId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setResult(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DownloadPeriod entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DownloadPeriod entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCityDao().getAllColumns());
            builder.append(" FROM tbldownloadperiod T");
            builder.append(" LEFT JOIN tbluser T0 ON T.'user_id'=T0.'id'");
            builder.append(" LEFT JOIN tblcity T1 ON T.'city_id'=T1.'id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DownloadPeriod loadCurrentDeep(Cursor cursor, boolean lock) {
        DownloadPeriod entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);
        offset += daoSession.getUserDao().getAllColumns().length;

        City city = loadCurrentOther(daoSession.getCityDao(), cursor, offset);
        entity.setCity(city);

        return entity;    
    }

    public DownloadPeriod loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DownloadPeriod> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DownloadPeriod> list = new ArrayList<DownloadPeriod>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DownloadPeriod> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DownloadPeriod> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
