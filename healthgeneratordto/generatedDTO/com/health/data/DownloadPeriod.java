package com.health.data;

import com.health.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table tbldownloadperiod.
 */
public class DownloadPeriod {

    private Long id;
    private java.util.Date DateFrom;
    private java.util.Date DateTo;
    private java.util.Date SyncDate;
    private Long UserId;
    private Long CityId;
    private Integer TypeId;
    private Integer Result;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DownloadPeriodDao myDao;

    private User user;
    private Long user__resolvedKey;

    private City city;
    private Long city__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public DownloadPeriod() {
    }

    public DownloadPeriod(Long id) {
        this.id = id;
    }

    public DownloadPeriod(Long id, java.util.Date DateFrom, java.util.Date DateTo, java.util.Date SyncDate, Long UserId, Long CityId, Integer TypeId, Integer Result) {
        this.id = id;
        this.DateFrom = DateFrom;
        this.DateTo = DateTo;
        this.SyncDate = SyncDate;
        this.UserId = UserId;
        this.CityId = CityId;
        this.TypeId = TypeId;
        this.Result = Result;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDownloadPeriodDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDateFrom() {
        return DateFrom;
    }

    public void setDateFrom(java.util.Date DateFrom) {
        this.DateFrom = DateFrom;
    }

    public java.util.Date getDateTo() {
        return DateTo;
    }

    public void setDateTo(java.util.Date DateTo) {
        this.DateTo = DateTo;
    }

    public java.util.Date getSyncDate() {
        return SyncDate;
    }

    public void setSyncDate(java.util.Date SyncDate) {
        this.SyncDate = SyncDate;
    }

    public Long getUserId() {
        return UserId;
    }

    public void setUserId(Long UserId) {
        this.UserId = UserId;
    }

    public Long getCityId() {
        return CityId;
    }

    public void setCityId(Long CityId) {
        this.CityId = CityId;
    }

    public Integer getTypeId() {
        return TypeId;
    }

    public void setTypeId(Integer TypeId) {
        this.TypeId = TypeId;
    }

    public Integer getResult() {
        return Result;
    }

    public void setResult(Integer Result) {
        this.Result = Result;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.UserId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            UserId = user == null ? null : user.getId();
            user__resolvedKey = UserId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public City getCity() {
        Long __key = this.CityId;
        if (city__resolvedKey == null || !city__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CityDao targetDao = daoSession.getCityDao();
            City cityNew = targetDao.load(__key);
            synchronized (this) {
                city = cityNew;
            	city__resolvedKey = __key;
            }
        }
        return city;
    }

    public void setCity(City city) {
        synchronized (this) {
            this.city = city;
            CityId = city == null ? null : city.getId();
            city__resolvedKey = CityId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
