package com.health.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.health.data.Particle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tblparticle.
*/
public class ParticleDao extends AbstractDao<Particle, Long> {

    public static final String TABLENAME = "tblparticle";

    /**
     * Properties of entity Particle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property ServerId = new Property(1, Long.class, "ServerId", false, "serverid");
        public final static Property RowId = new Property(2, String.class, "RowId", false, "rowid");
        public final static Property InfoDate = new Property(3, java.util.Date.class, "InfoDate", false, "dt");
        public final static Property Proton1MeV = new Property(4, Long.class, "Proton1MeV", false, "PROTON1_ME_V");
        public final static Property Proton10MeV = new Property(5, Long.class, "Proton10MeV", false, "PROTON10_ME_V");
        public final static Property Proton100MeV = new Property(6, Long.class, "Proton100MeV", false, "PROTON100_ME_V");
        public final static Property Electron08MeV = new Property(7, Long.class, "Electron08MeV", false, "ELECTRON08_ME_V");
        public final static Property Electron2MeV = new Property(8, Long.class, "Electron2MeV", false, "ELECTRON2_ME_V");
    };


    public ParticleDao(DaoConfig config) {
        super(config);
    }
    
    public ParticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tblparticle' (" + //
                "'id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'serverid' INTEGER UNIQUE ," + // 1: ServerId
                "'rowid' TEXT UNIQUE ," + // 2: RowId
                "'dt' INTEGER," + // 3: InfoDate
                "'PROTON1_ME_V' INTEGER," + // 4: Proton1MeV
                "'PROTON10_ME_V' INTEGER," + // 5: Proton10MeV
                "'PROTON100_ME_V' INTEGER," + // 6: Proton100MeV
                "'ELECTRON08_ME_V' INTEGER," + // 7: Electron08MeV
                "'ELECTRON2_ME_V' INTEGER);"); // 8: Electron2MeV
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_tblparticle_serverid ON tblparticle" +
                " (serverid);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tblparticle'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Particle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ServerId = entity.getServerId();
        if (ServerId != null) {
            stmt.bindLong(2, ServerId);
        }
 
        String RowId = entity.getRowId();
        if (RowId != null) {
            stmt.bindString(3, RowId);
        }
 
        java.util.Date InfoDate = entity.getInfoDate();
        if (InfoDate != null) {
            stmt.bindLong(4, InfoDate.getTime());
        }
 
        Long Proton1MeV = entity.getProton1MeV();
        if (Proton1MeV != null) {
            stmt.bindLong(5, Proton1MeV);
        }
 
        Long Proton10MeV = entity.getProton10MeV();
        if (Proton10MeV != null) {
            stmt.bindLong(6, Proton10MeV);
        }
 
        Long Proton100MeV = entity.getProton100MeV();
        if (Proton100MeV != null) {
            stmt.bindLong(7, Proton100MeV);
        }
 
        Long Electron08MeV = entity.getElectron08MeV();
        if (Electron08MeV != null) {
            stmt.bindLong(8, Electron08MeV);
        }
 
        Long Electron2MeV = entity.getElectron2MeV();
        if (Electron2MeV != null) {
            stmt.bindLong(9, Electron2MeV);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Particle readEntity(Cursor cursor, int offset) {
        Particle entity = new Particle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ServerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RowId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // InfoDate
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // Proton1MeV
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // Proton10MeV
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // Proton100MeV
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // Electron08MeV
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // Electron2MeV
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Particle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRowId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInfoDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setProton1MeV(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setProton10MeV(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setProton100MeV(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setElectron08MeV(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setElectron2MeV(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Particle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Particle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
