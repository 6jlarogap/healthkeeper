package com.health.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.health.data.Factor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tblfactor.
*/
public class FactorDao extends AbstractDao<Factor, Long> {

    public static final String TABLENAME = "tblfactor";

    /**
     * Properties of entity Factor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property ServerId = new Property(1, Long.class, "ServerId", false, "serverid");
        public final static Property RowId = new Property(2, String.class, "RowId", false, "rowid");
        public final static Property UserId = new Property(3, Long.class, "UserId", false, "userid");
        public final static Property StartDate = new Property(4, java.util.Date.class, "StartDate", false, "dt");
        public final static Property Value1 = new Property(5, Double.class, "Value1", false, "value1");
        public final static Property Value2 = new Property(6, Double.class, "Value2", false, "value2");
        public final static Property Value3 = new Property(7, Double.class, "Value3", false, "value3");
        public final static Property FactorTypeId = new Property(8, Long.class, "FactorTypeId", false, "factortypeid");
        public final static Property CustomFactorTypeId = new Property(9, Long.class, "CustomFactorTypeId", false, "customfactortypeid");
    };

    private DaoSession daoSession;


    public FactorDao(DaoConfig config) {
        super(config);
    }
    
    public FactorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tblfactor' (" + //
                "'id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'serverid' INTEGER UNIQUE ," + // 1: ServerId
                "'rowid' TEXT UNIQUE ," + // 2: RowId
                "'userid' INTEGER," + // 3: UserId
                "'dt' INTEGER," + // 4: StartDate
                "'value1' REAL," + // 5: Value1
                "'value2' REAL," + // 6: Value2
                "'value3' REAL," + // 7: Value3
                "'factortypeid' INTEGER," + // 8: FactorTypeId
                "'customfactortypeid' INTEGER);"); // 9: CustomFactorTypeId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_tblfactor_serverid ON tblfactor" +
                " (serverid);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_tblfactor_userid ON tblfactor" +
                " (userid);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_tblfactor_factortypeid ON tblfactor" +
                " (factortypeid);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_tblfactor_customfactortypeid ON tblfactor" +
                " (customfactortypeid);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tblfactor'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Factor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ServerId = entity.getServerId();
        if (ServerId != null) {
            stmt.bindLong(2, ServerId);
        }
 
        String RowId = entity.getRowId();
        if (RowId != null) {
            stmt.bindString(3, RowId);
        }
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(4, UserId);
        }
 
        java.util.Date StartDate = entity.getStartDate();
        if (StartDate != null) {
            stmt.bindLong(5, StartDate.getTime());
        }
 
        Double Value1 = entity.getValue1();
        if (Value1 != null) {
            stmt.bindDouble(6, Value1);
        }
 
        Double Value2 = entity.getValue2();
        if (Value2 != null) {
            stmt.bindDouble(7, Value2);
        }
 
        Double Value3 = entity.getValue3();
        if (Value3 != null) {
            stmt.bindDouble(8, Value3);
        }
 
        Long FactorTypeId = entity.getFactorTypeId();
        if (FactorTypeId != null) {
            stmt.bindLong(9, FactorTypeId);
        }
 
        Long CustomFactorTypeId = entity.getCustomFactorTypeId();
        if (CustomFactorTypeId != null) {
            stmt.bindLong(10, CustomFactorTypeId);
        }
    }

    @Override
    protected void attachEntity(Factor entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Factor readEntity(Cursor cursor, int offset) {
        Factor entity = new Factor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ServerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RowId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // UserId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // StartDate
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // Value1
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // Value2
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // Value3
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // FactorTypeId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // CustomFactorTypeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Factor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRowId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setStartDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setValue1(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setValue2(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setValue3(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setFactorTypeId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setCustomFactorTypeId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Factor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Factor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFactorTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCustomFactorTypeDao().getAllColumns());
            builder.append(" FROM tblfactor T");
            builder.append(" LEFT JOIN tblfactortype T0 ON T.'factortypeid'=T0.'id'");
            builder.append(" LEFT JOIN tblcustomfactortype T1 ON T.'customfactortypeid'=T1.'id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Factor loadCurrentDeep(Cursor cursor, boolean lock) {
        Factor entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FactorType factorType = loadCurrentOther(daoSession.getFactorTypeDao(), cursor, offset);
        entity.setFactorType(factorType);
        offset += daoSession.getFactorTypeDao().getAllColumns().length;

        CustomFactorType customFactorType = loadCurrentOther(daoSession.getCustomFactorTypeDao(), cursor, offset);
        entity.setCustomFactorType(customFactorType);

        return entity;    
    }

    public Factor loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Factor> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Factor> list = new ArrayList<Factor>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Factor> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Factor> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
