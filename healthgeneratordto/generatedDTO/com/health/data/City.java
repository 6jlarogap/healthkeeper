package com.health.data;

import com.health.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table tblcity.
 */
public class City {

    private Long id;
    private String name;
    private String CountryCode;
    private String Name_ru;
    private Double Lat;
    private Double Lng;
    private Long CountryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CityDao myDao;

    private Country country;
    private Long country__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public City() {
    }

    public City(Long id) {
        this.id = id;
    }

    public City(Long id, String name, String CountryCode, String Name_ru, Double Lat, Double Lng, Long CountryId) {
        this.id = id;
        this.name = name;
        this.CountryCode = CountryCode;
        this.Name_ru = Name_ru;
        this.Lat = Lat;
        this.Lng = Lng;
        this.CountryId = CountryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCountryCode() {
        return CountryCode;
    }

    public void setCountryCode(String CountryCode) {
        this.CountryCode = CountryCode;
    }

    public String getName_ru() {
        return Name_ru;
    }

    public void setName_ru(String Name_ru) {
        this.Name_ru = Name_ru;
    }

    public Double getLat() {
        return Lat;
    }

    public void setLat(Double Lat) {
        this.Lat = Lat;
    }

    public Double getLng() {
        return Lng;
    }

    public void setLng(Double Lng) {
        this.Lng = Lng;
    }

    public Long getCountryId() {
        return CountryId;
    }

    public void setCountryId(Long CountryId) {
        this.CountryId = CountryId;
    }

    /** To-one relationship, resolved on first access. */
    public Country getCountry() {
        Long __key = this.CountryId;
        if (country__resolvedKey == null || !country__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CountryDao targetDao = daoSession.getCountryDao();
            Country countryNew = targetDao.load(__key);
            synchronized (this) {
                country = countryNew;
            	country__resolvedKey = __key;
            }
        }
        return country;
    }

    public void setCountry(Country country) {
        synchronized (this) {
            this.country = country;
            CountryId = country == null ? null : country.getId();
            country__resolvedKey = CountryId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
