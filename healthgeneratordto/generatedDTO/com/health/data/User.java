package com.health.data;

import com.health.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table tbluser.
 */
public class User {

    private Long id;
    private Integer IsActive;
    private Integer IsStorePassword;
    private String Login;
    private String Password;
    private String FName;
    private String LName;
    private String MName;
    private java.util.Date BirthDate;
    private java.util.Date CreateDate;
    private Integer Sex;
    private Integer IsAutoSync;
    private Integer PeriodSyncData;
    private java.util.Date SyncDate;
    private Long CityId;
    private Long Question1;
    private Long Question2;
    private Integer MaritalStatusId;
    private Integer SocialStatusId;
    private Integer Height;
    private Integer Weight;
    private Integer PressureId;
    private Integer FootDistance;
    private Integer SleepTime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private City city;
    private Long city__resolvedKey;

    private RecoveryAccountQuestion ReqoveryQuestion1;
    private Long ReqoveryQuestion1__resolvedKey;

    private RecoveryAccountQuestion ReqoveryQuestion2;
    private Long ReqoveryQuestion2__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, Integer IsActive, Integer IsStorePassword, String Login, String Password, String FName, String LName, String MName, java.util.Date BirthDate, java.util.Date CreateDate, Integer Sex, Integer IsAutoSync, Integer PeriodSyncData, java.util.Date SyncDate, Long CityId, Long Question1, Long Question2, Integer MaritalStatusId, Integer SocialStatusId, Integer Height, Integer Weight, Integer PressureId, Integer FootDistance, Integer SleepTime) {
        this.id = id;
        this.IsActive = IsActive;
        this.IsStorePassword = IsStorePassword;
        this.Login = Login;
        this.Password = Password;
        this.FName = FName;
        this.LName = LName;
        this.MName = MName;
        this.BirthDate = BirthDate;
        this.CreateDate = CreateDate;
        this.Sex = Sex;
        this.IsAutoSync = IsAutoSync;
        this.PeriodSyncData = PeriodSyncData;
        this.SyncDate = SyncDate;
        this.CityId = CityId;
        this.Question1 = Question1;
        this.Question2 = Question2;
        this.MaritalStatusId = MaritalStatusId;
        this.SocialStatusId = SocialStatusId;
        this.Height = Height;
        this.Weight = Weight;
        this.PressureId = PressureId;
        this.FootDistance = FootDistance;
        this.SleepTime = SleepTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getIsActive() {
        return IsActive;
    }

    public void setIsActive(Integer IsActive) {
        this.IsActive = IsActive;
    }

    public Integer getIsStorePassword() {
        return IsStorePassword;
    }

    public void setIsStorePassword(Integer IsStorePassword) {
        this.IsStorePassword = IsStorePassword;
    }

    public String getLogin() {
        return Login;
    }

    public void setLogin(String Login) {
        this.Login = Login;
    }

    public String getPassword() {
        return Password;
    }

    public void setPassword(String Password) {
        this.Password = Password;
    }

    public String getFName() {
        return FName;
    }

    public void setFName(String FName) {
        this.FName = FName;
    }

    public String getLName() {
        return LName;
    }

    public void setLName(String LName) {
        this.LName = LName;
    }

    public String getMName() {
        return MName;
    }

    public void setMName(String MName) {
        this.MName = MName;
    }

    public java.util.Date getBirthDate() {
        return BirthDate;
    }

    public void setBirthDate(java.util.Date BirthDate) {
        this.BirthDate = BirthDate;
    }

    public java.util.Date getCreateDate() {
        return CreateDate;
    }

    public void setCreateDate(java.util.Date CreateDate) {
        this.CreateDate = CreateDate;
    }

    public Integer getSex() {
        return Sex;
    }

    public void setSex(Integer Sex) {
        this.Sex = Sex;
    }

    public Integer getIsAutoSync() {
        return IsAutoSync;
    }

    public void setIsAutoSync(Integer IsAutoSync) {
        this.IsAutoSync = IsAutoSync;
    }

    public Integer getPeriodSyncData() {
        return PeriodSyncData;
    }

    public void setPeriodSyncData(Integer PeriodSyncData) {
        this.PeriodSyncData = PeriodSyncData;
    }

    public java.util.Date getSyncDate() {
        return SyncDate;
    }

    public void setSyncDate(java.util.Date SyncDate) {
        this.SyncDate = SyncDate;
    }

    public Long getCityId() {
        return CityId;
    }

    public void setCityId(Long CityId) {
        this.CityId = CityId;
    }

    public Long getQuestion1() {
        return Question1;
    }

    public void setQuestion1(Long Question1) {
        this.Question1 = Question1;
    }

    public Long getQuestion2() {
        return Question2;
    }

    public void setQuestion2(Long Question2) {
        this.Question2 = Question2;
    }

    public Integer getMaritalStatusId() {
        return MaritalStatusId;
    }

    public void setMaritalStatusId(Integer MaritalStatusId) {
        this.MaritalStatusId = MaritalStatusId;
    }

    public Integer getSocialStatusId() {
        return SocialStatusId;
    }

    public void setSocialStatusId(Integer SocialStatusId) {
        this.SocialStatusId = SocialStatusId;
    }

    public Integer getHeight() {
        return Height;
    }

    public void setHeight(Integer Height) {
        this.Height = Height;
    }

    public Integer getWeight() {
        return Weight;
    }

    public void setWeight(Integer Weight) {
        this.Weight = Weight;
    }

    public Integer getPressureId() {
        return PressureId;
    }

    public void setPressureId(Integer PressureId) {
        this.PressureId = PressureId;
    }

    public Integer getFootDistance() {
        return FootDistance;
    }

    public void setFootDistance(Integer FootDistance) {
        this.FootDistance = FootDistance;
    }

    public Integer getSleepTime() {
        return SleepTime;
    }

    public void setSleepTime(Integer SleepTime) {
        this.SleepTime = SleepTime;
    }

    /** To-one relationship, resolved on first access. */
    public City getCity() {
        Long __key = this.CityId;
        if (city__resolvedKey == null || !city__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CityDao targetDao = daoSession.getCityDao();
            City cityNew = targetDao.load(__key);
            synchronized (this) {
                city = cityNew;
            	city__resolvedKey = __key;
            }
        }
        return city;
    }

    public void setCity(City city) {
        synchronized (this) {
            this.city = city;
            CityId = city == null ? null : city.getId();
            city__resolvedKey = CityId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public RecoveryAccountQuestion getReqoveryQuestion1() {
        Long __key = this.Question1;
        if (ReqoveryQuestion1__resolvedKey == null || !ReqoveryQuestion1__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RecoveryAccountQuestionDao targetDao = daoSession.getRecoveryAccountQuestionDao();
            RecoveryAccountQuestion ReqoveryQuestion1New = targetDao.load(__key);
            synchronized (this) {
                ReqoveryQuestion1 = ReqoveryQuestion1New;
            	ReqoveryQuestion1__resolvedKey = __key;
            }
        }
        return ReqoveryQuestion1;
    }

    public void setReqoveryQuestion1(RecoveryAccountQuestion ReqoveryQuestion1) {
        synchronized (this) {
            this.ReqoveryQuestion1 = ReqoveryQuestion1;
            Question1 = ReqoveryQuestion1 == null ? null : ReqoveryQuestion1.getId();
            ReqoveryQuestion1__resolvedKey = Question1;
        }
    }

    /** To-one relationship, resolved on first access. */
    public RecoveryAccountQuestion getReqoveryQuestion2() {
        Long __key = this.Question2;
        if (ReqoveryQuestion2__resolvedKey == null || !ReqoveryQuestion2__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RecoveryAccountQuestionDao targetDao = daoSession.getRecoveryAccountQuestionDao();
            RecoveryAccountQuestion ReqoveryQuestion2New = targetDao.load(__key);
            synchronized (this) {
                ReqoveryQuestion2 = ReqoveryQuestion2New;
            	ReqoveryQuestion2__resolvedKey = __key;
            }
        }
        return ReqoveryQuestion2;
    }

    public void setReqoveryQuestion2(RecoveryAccountQuestion ReqoveryQuestion2) {
        synchronized (this) {
            this.ReqoveryQuestion2 = ReqoveryQuestion2;
            Question2 = ReqoveryQuestion2 == null ? null : ReqoveryQuestion2.getId();
            ReqoveryQuestion2__resolvedKey = Question2;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
