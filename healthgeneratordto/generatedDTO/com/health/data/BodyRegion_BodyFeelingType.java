package com.health.data;

import com.health.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table tblbodyregion_feelingtype.
 */
public class BodyRegion_BodyFeelingType {

    private Long id;
    private Long BodyRegionId;
    private Long BodyFeelingTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BodyRegion_BodyFeelingTypeDao myDao;

    private BodyRegion bodyRegion;
    private Long bodyRegion__resolvedKey;

    private BodyFeelingType bodyFeelingType;
    private Long bodyFeelingType__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BodyRegion_BodyFeelingType() {
    }

    public BodyRegion_BodyFeelingType(Long id) {
        this.id = id;
    }

    public BodyRegion_BodyFeelingType(Long id, Long BodyRegionId, Long BodyFeelingTypeId) {
        this.id = id;
        this.BodyRegionId = BodyRegionId;
        this.BodyFeelingTypeId = BodyFeelingTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBodyRegion_BodyFeelingTypeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getBodyRegionId() {
        return BodyRegionId;
    }

    public void setBodyRegionId(Long BodyRegionId) {
        this.BodyRegionId = BodyRegionId;
    }

    public Long getBodyFeelingTypeId() {
        return BodyFeelingTypeId;
    }

    public void setBodyFeelingTypeId(Long BodyFeelingTypeId) {
        this.BodyFeelingTypeId = BodyFeelingTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public BodyRegion getBodyRegion() {
        Long __key = this.BodyRegionId;
        if (bodyRegion__resolvedKey == null || !bodyRegion__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BodyRegionDao targetDao = daoSession.getBodyRegionDao();
            BodyRegion bodyRegionNew = targetDao.load(__key);
            synchronized (this) {
                bodyRegion = bodyRegionNew;
            	bodyRegion__resolvedKey = __key;
            }
        }
        return bodyRegion;
    }

    public void setBodyRegion(BodyRegion bodyRegion) {
        synchronized (this) {
            this.bodyRegion = bodyRegion;
            BodyRegionId = bodyRegion == null ? null : bodyRegion.getId();
            bodyRegion__resolvedKey = BodyRegionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public BodyFeelingType getBodyFeelingType() {
        Long __key = this.BodyFeelingTypeId;
        if (bodyFeelingType__resolvedKey == null || !bodyFeelingType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BodyFeelingTypeDao targetDao = daoSession.getBodyFeelingTypeDao();
            BodyFeelingType bodyFeelingTypeNew = targetDao.load(__key);
            synchronized (this) {
                bodyFeelingType = bodyFeelingTypeNew;
            	bodyFeelingType__resolvedKey = __key;
            }
        }
        return bodyFeelingType;
    }

    public void setBodyFeelingType(BodyFeelingType bodyFeelingType) {
        synchronized (this) {
            this.bodyFeelingType = bodyFeelingType;
            BodyFeelingTypeId = bodyFeelingType == null ? null : bodyFeelingType.getId();
            bodyFeelingType__resolvedKey = BodyFeelingTypeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
